import subprocess
import pandas as pd


def test_run_experiment():
    """
    Goes up to root dir and runs command. Captures stdout and confirms exit code
    is 0.

    This does not test the output, just tests that the script runs.
    """
    args = [
        "python",
        "src/experiment.py",
        "10",
        "3",
        "1",
        "1",
        "2",
        "1",
        "5",
        "6",
        "0.25",
        "13",
        "33333",
        "1",
    ]
    result = subprocess.check_call(args, cwd="../")
    assert result == 0

    # Now checks the results are written and in the correct format.
    best_primary = pd.read_csv("../results/allocation_primary_33333.csv")
    best_secondary = pd.read_csv("../results/allocation_secondary_33333.csv")
    population_objectives = pd.read_csv("../results/population_objectives_33333.csv")
    expected_headers_allocations = [
        "scenario_id",
        "demand_scenario",
        "total_primary",
        "total_secondary",
        "population_size",
        "keep_size",
        "number_of_iterations",
        "initial_number_of_mutatation_repetitions",
        "cooling_rate",
        "max_primary",
        "max_secondary",
        "a00",
        "a01",
        "a02",
        "a03",
        "a04",
        "a05",
        "a06",
        "a07",
        "a08",
        "a09",
        "a10",
        "a11",
        "a12",
        "a13",
        "a14",
        "a15",
        "a16",
        "a17",
        "a18",
        "a19",
        "a20",
        "a21",
        "a22",
        "a23",
        "a24",
        "a25",
        "a26",
        "a27",
        "a28",
        "a29",
        "a30",
        "a31",
        "a32",
        "a33",
        "a34",
        "a35",
        "a36",
        "a37",
        "a38",
        "a39",
        "a40",
        "a41",
        "a42",
        "a43",
        "a44",
        "a45",
        "a46",
        "a47",
        "a48",
        "a49",
        "a50",
        "a51",
        "a52",
        "a53",
        "a54",
        "a55",
        "a56",
        "a57",
        "a58",
        "a59",
        "a60",
        "a61",
        "a62",
        "a63",
        "a64",
        "a65",
        "a66",
    ]

    expected_headers_population = [
        "scenario_id",
        "demand_scenario",
        "total_primary",
        "total_secondary",
        "population_size",
        "keep_size",
        "number_of_iterations",
        "initial_number_of_mutatation_repetitions",
        "cooling_rate",
        "max_primary",
        "max_secondary",
        "iteration",
        "0",
        "1",
    ]

    assert len(best_primary.columns) == 78
    assert len(best_secondary.columns) == 78
    for c in range(78):
        assert best_primary.columns[c] == expected_headers_allocations[c]
        assert best_secondary.columns[c] == expected_headers_allocations[c]
    assert len(population_objectives.columns) == 14
    for c in range(14):
        assert population_objectives.columns[c] == expected_headers_population[c]
    assert len(best_primary) == 1
    assert len(best_secondary) == 1
    assert len(population_objectives) == 5
    assert (
        best_primary[
            [
                "a00",
                "a01",
                "a02",
                "a03",
                "a04",
                "a05",
                "a06",
                "a07",
                "a08",
                "a09",
                "a10",
                "a11",
                "a12",
                "a13",
                "a14",
                "a15",
                "a16",
                "a17",
                "a18",
                "a19",
                "a20",
                "a21",
                "a22",
                "a23",
                "a24",
                "a25",
                "a26",
                "a27",
                "a28",
                "a29",
                "a30",
                "a31",
                "a32",
                "a33",
                "a34",
                "a35",
                "a36",
                "a37",
                "a38",
                "a39",
                "a40",
                "a41",
                "a42",
                "a43",
                "a44",
                "a45",
                "a46",
                "a47",
                "a48",
                "a49",
                "a50",
                "a51",
                "a52",
                "a53",
                "a54",
                "a55",
                "a56",
                "a57",
                "a58",
                "a59",
                "a60",
                "a61",
                "a62",
                "a63",
                "a64",
                "a65",
                "a66",
            ]
        ]
        .loc[0]
        .sum()
        == 10
    )
    assert (
        best_secondary[
            [
                "a00",
                "a01",
                "a02",
                "a03",
                "a04",
                "a05",
                "a06",
                "a07",
                "a08",
                "a09",
                "a10",
                "a11",
                "a12",
                "a13",
                "a14",
                "a15",
                "a16",
                "a17",
                "a18",
                "a19",
                "a20",
                "a21",
                "a22",
                "a23",
                "a24",
                "a25",
                "a26",
                "a27",
                "a28",
                "a29",
                "a30",
                "a31",
                "a32",
                "a33",
                "a34",
                "a35",
                "a36",
                "a37",
                "a38",
                "a39",
                "a40",
                "a41",
                "a42",
                "a43",
                "a44",
                "a45",
                "a46",
                "a47",
                "a48",
                "a49",
                "a50",
                "a51",
                "a52",
                "a53",
                "a54",
                "a55",
                "a56",
                "a57",
                "a58",
                "a59",
                "a60",
                "a61",
                "a62",
                "a63",
                "a64",
                "a65",
                "a66",
            ]
        ]
        .loc[0]
        .sum()
        == 3
    )
